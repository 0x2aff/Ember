/*
 * Copyright (c) 2014 Ember
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/* 
 * This file was automatically generated by the DBC parser tool.
 * Rather than making changes here, you should consider updating the
 * parser's templates/DBC definitions and rerunning.
 */

#include "DiskLoader.h"
#include "DBCHeader.h"
#include "Storage.h"
#include "DiskDefs.h"
#include "MemoryDefs.h"
#include <boost/interprocess/file_mapping.hpp>
#include <boost/interprocess/mapped_region.hpp>
#include <cstdint>

namespace bi = boost::interprocess;

namespace ember { namespace dbc {

namespace detail {

#pragma pack(push, 1)

template<typename T>
struct MappedDBC {
	const DBCHeader* header;
	const T* records;
	const char* strings;
};

#pragma pack(pop)

template<typename T>
const MappedDBC<T> get_offsets(const void* start) {
	const char* data = static_cast<const char*>(start);
	auto dbc = reinterpret_cast<const DBCHeader*>(data);
	auto records = reinterpret_cast<const T*>(data + sizeof(DBCHeader));
	auto string_block = data + sizeof(DBCHeader) + (dbc->record_size * dbc->records);
	return MappedDBC<T>{dbc, records, string_block};
}

<%TEMPLATE_DISK_LOAD_FUNCTIONS%>

} // detail

DiskLoader::DiskLoader(std::string dir_path, LogCB log_cb)
                       : log_cb_(std::move(log_cb)), dir_path_(std::move(dir_path)) {
<%TEMPLATE_DISK_LOAD_MAP_INSERTION%>
}

Storage DiskLoader::load(const std::vector<std::string>& whitelist) const {
	Storage storage;

	for(auto& dbc : whitelist) {
		auto it = dbc_map.find(dbc);

		if(it == dbc_map.end()) {
			throw std::runtime_error("Cannot load an unknown DBC file, " + dbc);
		}
		
		log_cb_("Loading " + dbc + " DBC data...");
		it->second(storage, dir_path_);
	}

	return storage;
}

Storage DiskLoader::load() const {
	Storage storage;
<%TEMPLATE_DISK_LOAD_FUNCTION_CALLS%>
	return storage;		
}

}} // dbc, ember