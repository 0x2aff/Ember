/*
 * Copyright (c) 2014, 2016 Ember
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/* 
 * This file was automatically generated by the DBC parser tool.
 * Rather than making changes here, you should consider updating the
 * parser's templates/DBC definitions and rerunning.
 */

#include <dbcreader/DiskLoader.h>
#include <dbcreader/DBCHeader.h>
#include <dbcreader/Storage.h>
#include <dbcreader/DiskDefs.h>
#include <dbcreader/MemoryDefs.h>
#include <boost/interprocess/file_mapping.hpp>
#include <boost/interprocess/mapped_region.hpp>
#include <cstdint>

namespace bi = boost::interprocess;

namespace ember { namespace dbc {

namespace detail {

#pragma pack(push, 1)

template<typename T>
struct MappedDBC {
	const DBCHeader* header;
	const T* records;
	const char* strings;
};

#pragma pack(pop)

template<typename T>
const MappedDBC<T> get_offsets(const void* start) {
	const char* data = static_cast<const char*>(start);
	auto dbc = reinterpret_cast<const DBCHeader*>(data);
	auto records = reinterpret_cast<const T*>(data + sizeof(DBCHeader));
	auto string_block = data + sizeof(DBCHeader) + (dbc->record_size * dbc->records);
	return MappedDBC<T>{dbc, records, string_block};
}

void load_chr_classes(Storage& storage, const std::string& dir_path) {
	bi::file_mapping file(std::string(dir_path + "ChrClasses.dbc").c_str(), bi::read_only);
	bi::mapped_region region(file, bi::read_only);
	auto dbc = get_offsets<disk::ChrClasses>(region.get_address());

	for(std::uint32_t i = 0; i < dbc.header->records; ++i) {
		ChrClasses entry{};
		entry.id = dbc.records[i].id;
		entry.player_class = dbc.records[i].player_class;
		entry.damage_bonus_stat = dbc.records[i].damage_bonus_stat;
		entry.power_type = static_cast<ChrClasses::PowerType>(dbc.records[i].power_type);
		entry.pet_name_token = dbc.strings + dbc.records[i].pet_name_token;

		 // string_ref_loc block
		entry.name.enGB = dbc.strings + dbc.records[i].name.enGB;
		entry.name.koKR = dbc.strings + dbc.records[i].name.koKR;
		entry.name.frFR = dbc.strings + dbc.records[i].name.frFR;
		entry.name.deDE = dbc.strings + dbc.records[i].name.deDE;
		entry.name.enCN = dbc.strings + dbc.records[i].name.enCN;
		entry.name.enTW = dbc.strings + dbc.records[i].name.enTW;
		entry.name.esES = dbc.strings + dbc.records[i].name.esES;
		entry.name.esMX = dbc.strings + dbc.records[i].name.esMX;

		entry.filename = dbc.strings + dbc.records[i].filename;
		entry.class_mask = dbc.records[i].class_mask;
		entry.hybrid_class = dbc.records[i].hybrid_class;
		storage.chr_classes.emplace_back(entry.id, entry);
	}
}



} // detail

DiskLoader::DiskLoader(std::string dir_path, LogCB log_cb)
                       : log_cb_(std::move(log_cb)), dir_path_(std::move(dir_path)) {
	dbc_map.emplace("ChrClasses", detail::load_chr_classes);

}

Storage DiskLoader::load(const std::vector<std::string>& whitelist) const {
	Storage storage;

	for(auto& dbc : whitelist) {
		auto it = dbc_map.find(dbc);

		if(it == dbc_map.end()) {
			throw std::runtime_error("Cannot load an unknown DBC file, " + dbc);
		}
		
		log_cb_("Loading " + dbc + " DBC data...");
		it->second(storage, dir_path_);
	}

	return storage;
}

Storage DiskLoader::load() const {
	Storage storage;
	log_cb_("Loading ChrClasses DBC data...");
	detail::load_chr_classes(storage, dir_path_);

	return storage;		
}

}} // dbc, ember