/*
 * Copyright (c) 2014, 2016 Ember
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/* 
 * This file was automatically generated by the DBC parser tool.
 * Rather than making changes here, you should consider updating the
 * parser's templates/DBC definitions and rerunning.
 */

#include <dbcreader/DBCMap.h>
#include <dbcreader/MemoryDefs.h>
#include <type_traits>

#pragma once

namespace ember { namespace dbc {

struct Storage {
	DBCMap<AddonData> addon_data;
	DBCMap<AnimationData> animation_data;
	DBCMap<AreaTable> area_table;
	DBCMap<CameraShakes> camera_shakes;
	DBCMap<CharacterFacialHairStyles> character_facial_hair_styles;
	DBCMap<CharBaseInfo> char_base_info;
	DBCMap<CharSections> char_sections;
	DBCMap<CharStartBase> char_start_base;
	DBCMap<CharStartOutfit> char_start_outfit;
	DBCMap<CharStartSpells> char_start_spells;
	DBCMap<CharStartTalents> char_start_talents;
	DBCMap<CharStartZones> char_start_zones;
	DBCMap<CharVariations> char_variations;
	DBCMap<ChrClasses> chr_classes;
	DBCMap<ChrRaces> chr_races;
	DBCMap<CinematicCamera> cinematic_camera;
	DBCMap<CinematicSequences> cinematic_sequences;
	DBCMap<CreatureDisplayInfo> creature_display_info;
	DBCMap<CreatureDisplayInfoExtra> creature_display_info_extra;
	DBCMap<CreatureModelData> creature_model_data;
	DBCMap<CreatureSoundData> creature_sound_data;
	DBCMap<CreatureType> creature_type;
	DBCMap<Faction> faction;
	DBCMap<FactionGroup> faction_group;
	DBCMap<FactionTemplate> faction_template;
	DBCMap<FootprintTextures> footprint_textures;
	DBCMap<HelmetGeosetVisData> helmet_geoset_vis_data;
	DBCMap<ItemClass> item_class;
	DBCMap<ItemDisplayInfo> item_display_info;
	DBCMap<ItemGroupSounds> item_group_sounds;
	DBCMap<ItemSubClass> item_sub_class;
	DBCMap<ItemVisualEffects> item_visual_effects;
	DBCMap<ItemVisuals> item_visuals;
	DBCMap<Light> light;
	DBCMap<LightParams> light_params;
	DBCMap<LightSkybox> light_skybox;
	DBCMap<LiquidType> liquid_type;
	DBCMap<LoadingScreens> loading_screens;
	DBCMap<Map> map;
	DBCMap<NamesProfanity> names_profanity;
	DBCMap<NamesReserved> names_reserved;
	DBCMap<NPCSounds> npc_sounds;
	DBCMap<Resistances> resistances;
	DBCMap<SoundAmbience> sound_ambience;
	DBCMap<SoundEntries> sound_entries;
	DBCMap<SoundProviderPreferences> sound_provider_preferences;
	DBCMap<Spell> spell;
	DBCMap<SpellCastTimes> spell_cast_times;
	DBCMap<SpellCategory> spell_category;
	DBCMap<SpellDispelType> spell_dispel_type;
	DBCMap<SpellDuration> spell_duration;
	DBCMap<SpellFocusObject> spell_focus_object;
	DBCMap<SpellIcon> spell_icon;
	DBCMap<SpellItemEnchantment> spell_item_enchantment;
	DBCMap<SpellMechanic> spell_mechanic;
	DBCMap<SpellRadius> spell_radius;
	DBCMap<SpellRange> spell_range;
	DBCMap<SpellShapeshiftForm> spell_shapeshift_form;
	DBCMap<SpellVisual> spell_visual;
	DBCMap<SpellVisualEffectName> spell_visual_effect_name;
	DBCMap<SpellVisualKit> spell_visual_kit;
	DBCMap<Talent> talent;
	DBCMap<TalentTab> talent_tab;
	DBCMap<UnitBlood> unit_blood;
	DBCMap<ZoneIntroMusicTable> zone_intro_music_table;
	DBCMap<ZoneMusic> zone_music;


	Storage() = default;
	Storage(const Storage&) = delete;
	Storage& operator=(const Storage&) = delete;

	//explicit because msvc is missing default move support
	void moves(Storage& src) {
		addon_data = std::move(addon_data);
		animation_data = std::move(animation_data);
		area_table = std::move(area_table);
		camera_shakes = std::move(camera_shakes);
		character_facial_hair_styles = std::move(character_facial_hair_styles);
		char_base_info = std::move(char_base_info);
		char_sections = std::move(char_sections);
		char_start_base = std::move(char_start_base);
		char_start_outfit = std::move(char_start_outfit);
		char_start_spells = std::move(char_start_spells);
		char_start_talents = std::move(char_start_talents);
		char_start_zones = std::move(char_start_zones);
		char_variations = std::move(char_variations);
		chr_classes = std::move(chr_classes);
		chr_races = std::move(chr_races);
		cinematic_camera = std::move(cinematic_camera);
		cinematic_sequences = std::move(cinematic_sequences);
		creature_display_info = std::move(creature_display_info);
		creature_display_info_extra = std::move(creature_display_info_extra);
		creature_model_data = std::move(creature_model_data);
		creature_sound_data = std::move(creature_sound_data);
		creature_type = std::move(creature_type);
		faction = std::move(faction);
		faction_group = std::move(faction_group);
		faction_template = std::move(faction_template);
		footprint_textures = std::move(footprint_textures);
		helmet_geoset_vis_data = std::move(helmet_geoset_vis_data);
		item_class = std::move(item_class);
		item_display_info = std::move(item_display_info);
		item_group_sounds = std::move(item_group_sounds);
		item_sub_class = std::move(item_sub_class);
		item_visual_effects = std::move(item_visual_effects);
		item_visuals = std::move(item_visuals);
		light = std::move(light);
		light_params = std::move(light_params);
		light_skybox = std::move(light_skybox);
		liquid_type = std::move(liquid_type);
		loading_screens = std::move(loading_screens);
		map = std::move(map);
		names_profanity = std::move(names_profanity);
		names_reserved = std::move(names_reserved);
		npc_sounds = std::move(npc_sounds);
		resistances = std::move(resistances);
		sound_ambience = std::move(sound_ambience);
		sound_entries = std::move(sound_entries);
		sound_provider_preferences = std::move(sound_provider_preferences);
		spell = std::move(spell);
		spell_cast_times = std::move(spell_cast_times);
		spell_category = std::move(spell_category);
		spell_dispel_type = std::move(spell_dispel_type);
		spell_duration = std::move(spell_duration);
		spell_focus_object = std::move(spell_focus_object);
		spell_icon = std::move(spell_icon);
		spell_item_enchantment = std::move(spell_item_enchantment);
		spell_mechanic = std::move(spell_mechanic);
		spell_radius = std::move(spell_radius);
		spell_range = std::move(spell_range);
		spell_shapeshift_form = std::move(spell_shapeshift_form);
		spell_visual = std::move(spell_visual);
		spell_visual_effect_name = std::move(spell_visual_effect_name);
		spell_visual_kit = std::move(spell_visual_kit);
		talent = std::move(talent);
		talent_tab = std::move(talent_tab);
		unit_blood = std::move(unit_blood);
		zone_intro_music_table = std::move(zone_intro_music_table);
		zone_music = std::move(zone_music);

	}

	Storage(Storage&& src) {
		moves(src);	
	}

	Storage& operator=(Storage&& src) {
		moves(src);
		return *this;
	}
};

}} // dbc, ember