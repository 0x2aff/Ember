/*
 * Copyright (c) 2014, 2016 Ember
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/* 
 * This file was automatically generated by the DBC parser tool.
 * Rather than making changes here, you should consider updating the
 * parser's templates/DBC definitions and rerunning.
 */

#pragma once 

#include <cstdint>

namespace ember { namespace dbc { namespace disk {

typedef std::uint32_t string_ref;
typedef std::uint32_t uint32;
typedef std::int32_t  int32;
typedef std::uint16_t uint16;
typedef std::int16_t  int16;
typedef std::uint8_t  uint8;
typedef std::int8_t   int8;
typedef std::uint32_t bool32;

#pragma pack(push, 1)

struct StringRefLoc {
	string_ref enGB;
	string_ref koKR;
	string_ref frFR;
	string_ref deDE;
	string_ref enCN;
	string_ref enTW;
	string_ref esES;
	string_ref esMX;
	std::uint32_t flags;
};

typedef StringRefLoc string_ref_loc;

struct AnimationData {
	typedef int32 WeaponFlags;
	uint32 id;
	string_ref name;
	WeaponFlags weapon_flags;
	int32 body_flags;
	int32 unknown;
	uint32 fallback;
	uint32 behaviour;
};

struct AreaTable {
	typedef int32 AreaFlags;
	uint32 id;
	uint32 map;
	uint32 parent_area_table;
	int32 area_bit;
	AreaFlags flags;
	uint32 sound_preferences;
	uint32 sound_preferences_underwater;
	uint32 sound_ambience;
	uint32 zone_music;
	uint32 zone_music_intro;
	int32 exploration_level;
	string_ref_loc area_name;
	uint32 faction_group;
	uint32 liquid_type;
	int32 min_elevation;
	float ambient_multiplier;
	uint32 light;
};

struct CameraShakes {
	uint32 id;
	int32 shake_type;
	int32 direction;
	float amplitude;
	float frequency;
	float duration;
	float phase;
	float coefficient;
};

struct CharacterFacialHairStyles {
	typedef int32 Sex;
	uint32 race;
	Sex sex;
	uint32 variation;
	int32 geoset[6];
};

struct CharBaseInfo {
	uint8 race;
	uint8 class_;
};

struct CharSections {
	typedef int32 Sex;
	typedef int32 SelectionType;
	uint32 id;
	uint32 race;
	Sex sex;
	SelectionType type;
	int32 variation_index;
	int32 colour_index;
	string_ref texture_name[3];
	bool32 npc_only;
};

struct CharStartBase {
	uint32 id;
	uint32 race;
	uint32 class_;
	uint32 zone;
	uint32 outfit;
};

struct CharStartOutfit {
	typedef int8 Sex;
	uint32 id;
	uint8 race;
	uint8 class_;
	Sex sex;
	int8 outfit_id;
	uint32 item_id[12];
	uint32 display_id[12];
	uint32 inv_slot_id[12];
};

struct CharStartSpells {
	uint32 id;
	uint32 race;
	uint32 class_;
	uint32 spell;
};

struct CharStartTalents {
	uint32 id;
	uint32 race;
	uint32 class_;
	uint32 talent;
};

struct CharStartZones {
	struct Vector {
		float x;
		float y;
		float z;
	};

	uint32 id;
	uint32 area;
	Vector position;
	Vector orientation;
};

struct CharVariations {
	typedef int32 Sex;
	uint32 id;
	Sex sex;
	int32 unknown_1;
	int32 mask[2];
	int32 unknown_2;
};

struct ChrClasses {
	typedef int32 PowerType;
	uint32 id;
	uint32 player_class;
	int32 damage_bonus_stat;
	PowerType power_type;
	string_ref pet_name_token;
	string_ref_loc name;
	string_ref filename;
	int32 class_mask;
	bool32 hybrid_class;
};

struct ChrRaces {
	typedef uint32 Flags;
	typedef uint32 BaseLanguage;
	uint32 id;
	Flags flags;
	uint32 faction;
	uint32 exploration_sound;
	uint32 male_display;
	uint32 female_display;
	string_ref client_prefix;
	float speed_modifier;
	BaseLanguage base_lang;
	uint32 creature_type;
	uint32 login_effect;
	int32 unknown1;
	uint32 res_sickness_spell;
	uint32 splash_sound_entry;
	int32 unknown2;
	string_ref client_file_path;
	uint32 cinematic_sequence;
	string_ref_loc name;
	string_ref facial_hair_customisation[2];
	string_ref hair_customisation;
};

struct CinematicCamera {
	uint32 id;
	string_ref model;
	uint32 sound_entry;
	float location_x;
	float location_y;
	float location_z;
	float rotation;
};

struct CinematicSequences {
	uint32 id;
	uint32 sound_entry;
	uint32 cinematic_camera_1[8];
};

struct CreatureDisplayInfo {
	typedef int32 SizeClass;
	uint32 id;
	uint32 model;
	uint32 sound;
	uint32 extended_display_info;
	float creature_model_scale;
	int32 creature_model_alpha;
	string_ref texture_variation[3];
	SizeClass size;
	uint32 blood;
	uint32 npc_sound;
};

struct CreatureDisplayInfoExtra {
	typedef int32 Sex;
	uint32 id;
	uint32 display_race;
	Sex sex;
	int32 skin;
	int32 face;
	int32 hair_style;
	int32 hair_colour;
	int32 facial_hair;
	uint32 npc_item_display[9];
	int32 flags;
	string_ref bake_name;
};

struct CreatureModelData {
	typedef int32 SizeClass;
	uint32 id;
	int32 flags;
	string_ref model_path;
	SizeClass size;
	float model_scale;
	uint32 blood;
	uint32 footprint_texture;
	float footprint_texture_length;
	float footprint_texture_width;
	float footprint_texture_scale;
	int32 foley_material;
	int32 footstep_shake_size;
	int32 death_thud_shake_size;
	float collision_width;
	float collision_height;
	float mount_height;
};

struct CreatureSoundData {
	uint32 id;
	uint32 sound_exertion;
	uint32 sound_exertion_critical;
	uint32 sound_injury;
	uint32 sound_injury_critical;
	uint32 sound_injury_crushing_blow;
	uint32 sound_death;
	uint32 sound_stun;
	uint32 sound_stand;
	uint32 sound_footstep;
	uint32 sound_aggro;
	uint32 sound_wing_flap;
	uint32 sound_wing_glide;
	uint32 sound_alert;
	uint32 sound_fidget;
	uint32 custom_attack;
	uint32 npc_sound;
	uint32 loop_sound;
	int32 creature_impact_type;
	uint32 sound_jump_start;
	uint32 sound_jump_end;
	uint32 sound_pet_attack;
	uint32 sound_pet_order;
	uint32 sound_pet_dismiss;
	int32 fidget_delay_seconds_min;
	int32 fidget_delay_seconds_max;
	uint32 birth_sound;
	uint32 spell_cast_directed_sound;
	uint32 submerge_sound;
	uint32 submerged_sound;
};

struct CreatureType {
	uint32 id;
	string_ref_loc name;
	bool32 flags;
};

struct Faction {
	typedef int32 ReputationRaceMask;
	typedef int32 ReputationFlags;
	uint32 id;
	int32 reputation_index;
	ReputationRaceMask reputation_race_mask[4];
	int32 reputation_class_mask[4];
	int32 reputation_base[4];
	ReputationFlags reputation_flags[4];
	uint32 parent_faction;
	string_ref_loc name;
	string_ref_loc description;
};

struct FactionGroup {
	uint32 id;
	int32 mask_id;
	string_ref internal_name;
	string_ref_loc name;
};

struct FactionTemplate {
	typedef int32 Flags;
	uint32 id;
	uint32 faction;
	Flags flags;
	uint32 faction_group;
	uint32 friend_group;
	uint32 enemy_group;
	uint32 enemies[4];
	uint32 friends[4];
};

struct FootprintTextures {
	uint32 id;
	string_ref footstep_file_path;
};

struct HelmetGeosetVisData {
	uint32 id;
	int32 hide_geoset[5];
};

struct ItemClass {
	typedef int32 Class;
	uint32 id;
	uint32 subclass_map;
	Class item_class;
};

struct ItemDisplayInfo {
	uint32 id;
	string_ref model_name[2];
	string_ref model_texture[2];
	string_ref inventory_icon[2];
	int32 geoset_group[3];
	uint32 spell_visual;
	uint32 group_sound_index;
	uint32 helmet_geoset_vis[2];
	string_ref textures[8];
	uint32 item_visual;
};

struct ItemGroupSounds {
	uint32 id;
	uint32 sound_entry[4];
};

struct ItemSubClass {
	uint32 item_class;
	int32 subclass;
	int32 prerequisite_proficiency;
	int32 postrequisite_proficiency;
	int32 flags;
	int32 display_flags;
	int32 weapon_parry_sequence;
	int32 weapon_ready_sequence;
	int32 weapon_attack_sequence;
	int32 weapon_swing_size;
	string_ref_loc display_name;
	string_ref_loc verbose_name;
};

struct ItemVisualEffects {
	uint32 id;
	string_ref model_path;
};

struct ItemVisuals {
	uint32 id;
	uint32 item_visual_effects[5];
};

struct Light {
	uint32 id;
	uint32 map;
	float location_x;
	float location_y;
	float location_z;
	float falloff_start;
	float falloff_end;
	uint32 light_params[5];
};

struct LightParams {
	uint32 id;
	bool32 highlight_sky;
	uint32 light_skybox;
	float glow;
	float water_shallow_alpha;
	float water_deep_alpha;
	float ocean_shallow_alpha;
	float ocean_deep_alpha;
	uint32 flags;
};

struct LightSkybox {
	uint32 id;
	string_ref skybox_model_path;
};

struct LiquidType {
	typedef int32 Type;
	uint32 id;
	string_ref name;
	Type type;
	uint32 spell;
};

struct LoadingScreens {
	uint32 id;
	string_ref name;
	string_ref file_path;
};

struct Map {
	typedef int32 InstanceType;
	uint32 id;
	string_ref internal_name;
	InstanceType instance_type;
	bool32 battleground;
	string_ref_loc map_name;
	int32 min_level;
	int32 max_level;
	int32 max_players;
	int32 unknown[3];
	uint32 area_table;
	string_ref_loc map_description_horde;
	string_ref_loc map_description_alliance;
	uint32 loading_screen;
	int32 raid_offset;
	int32 unknown_2[2];
};

struct NamesProfanity {
	uint32 id;
	string_ref name;
};

struct NamesReserved {
	uint32 id;
	string_ref name;
};

struct NPCSounds {
	uint32 id;
	uint32 sound_entries[4];
};

struct Resistances {
	uint32 id;
	bool32 physical_damage;
	uint32 fizzle_sound_entry;
	string_ref_loc name;
};

struct SoundAmbience {
	uint32 id;
	uint32 day_sound;
	uint32 night_sound;
};

struct SoundEntries {
	typedef int32 SoundType;
	uint32 id;
	SoundType sound_type;
	string_ref name;
	string_ref files[10];
	uint32 frequency[10];
	string_ref directory_base;
	float volume;
	int32 flags;
	float min_distance;
	float distance_cutoff;
	int32 sound_entries_advanced;
};

struct SoundProviderPreferences {
	uint32 id;
	string_ref description;
	int32 flags;
	int32 eax_environment_selection;
	float eax_decay_time;
	float eax2_environment_size;
	float eax_environment_diffusion;
	int32 eax2_room;
	int32 eax2_room_hf;
	float eax2_decay_hf_ratio;
	int32 eax2_reflections;
	float eax2_reflections_delay;
	int32 eax2_reverb;
	float eax2_reverb_delay;
	float eax2_room_rolloff;
	float eax2_air_absorption;
	int32 eax3_room_lf;
	float eax3_delay_lf_ratio;
	float eax3_echo_time;
	float eax3_echo_depth;
	float eax3_modulation_time;
	float eax3_modulation_depth;
	float eax3_hf_reference;
	float eax3_lf_reference;
};

struct Spell {
	uint32 id;
	uint32 school;
	uint32 category;
	int32 cast_ui;
	uint32 dispel_type;
	uint32 mechanic;
	int32 attributes;
	int32 attributes_ex[4];
	uint32 shapeshift_mask;
	uint32 shapeshift_exclude;
	int32 targets;
	uint32 target_creature_type;
	uint32 requires_spell_focus;
	int32 caster_aura_state;
	int32 target_aura_state;
	uint32 casting_time_index;
	int32 recovery_time;
	int32 category_recovery_time;
	int32 aura_interrupt_flags;
	int32 channel_interrupt_flags;
	int32 proc_type_mask;
	int32 proc_chance;
	int32 proc_charges;
	int32 max_level;
	int32 base_level;
	int32 spell_level;
	uint32 duration;
	int32 power_type;
	int32 mana_cost;
	int32 mana_cost_per_level;
	int32 mana_cost_per_second;
	int32 mana_cost_per_second_per_level;
	uint32 range;
	float speed;
	uint32 modal_next_spell;
	int32 stack_amount;
	int32 totem[2];
	int32 regent[8];
	int32 reagent_count[8];
	uint32 equipped_item_class;
	uint32 equipped_item_subclass;
	int32 equipped_item_inventory_type;
	int32 effect[3];
	int32 effect_die_sides[3];
	int32 effect_base_dice[3];
	float effect_dice_per_level[3];
	float effect_real_points_per_level[3];
	int32 effect_base_points[3];
	uint32 effect_mechanic[3];
	int32 implicit_target_a[3];
	int32 implicit_target_b[3];
	uint32 effect_radius[3];
	int32 effect_aura[3];
	float effect_amplitude[3];
	float effect_multiple_values[3];
	int32 effect_chain_target[3];
	int32 effect_item_type[3];
	uint32 effect_misc_value[3];
	uint32 effect_trigger_spell[3];
	float effect_points_per_combo[3];
	int32 spell_visual[2];
	uint32 spell_icon;
	int32 active_icon;
	int32 spell_priority;
	int32 unknown_flag;
	string_ref_loc name;
	string_ref_loc name_subtext;
	string_ref_loc description;
	string_ref_loc aura_description;
	int32 mana_cost_percent;
	int32 start_recovery_category;
	int32 start_recovery_time;
	int32 max_target_level;
	uint32 spell_class_set;
	int32 spell_class_mask[2];
	int32 max_targets;
	int32 defence_type;
	int32 prevention_type;
	int32 stance_bar_order;
	float damage_multiplier[3];
	int32 min_faction;
	int32 min_reputation;
	int32 required_aura_vision;
};

struct SpellCastTimes {
	uint32 id;
	int32 base;
	int32 per_level_increase;
	int32 minimum;
};

struct SpellCategory {
	uint32 id;
	int32 flags;
};

struct SpellDispelType {
	uint32 id;
	string_ref name;
	int32 mask;
	bool32 allow_immunity;
};

struct SpellDuration {
	uint32 id;
	int32 duration;
	int32 duration_per_level;
	int32 max_duration;
};

struct SpellFocusObject {
	uint32 id;
	string_ref_loc name;
};

struct SpellIcon {
	uint32 id;
	string_ref texture_file;
};

struct SpellItemEnchantment {
	uint32 id;
	int32 enchantment_type[3];
	int32 effect_points_min[3];
	int32 effect_points_max[3];
	int32 effect_arg[3];
	string_ref_loc name;
	uint32 item_visual;
	int32 flags;
};

struct SpellMechanic {
	uint32 id;
	string_ref_loc state_name;
};

struct SpellRadius {
	uint32 id;
	float radius;
	float radius_per_level;
	float radius_max;
};

struct SpellRange {
	uint32 id;
	float range_min;
	float range_max;
	int32 flags;
	string_ref_loc display_name;
	string_ref_loc display_name_short;
};

struct SpellShapeshiftForm {
	uint32 id;
	int32 bonus_action_bar;
	string_ref_loc name;
	int32 flags;
	int32 creature_type;
	uint32 spell_icon;
};

struct SpellVisual {
	uint32 id;
	uint32 precast_kit;
	uint32 cast_kit;
	uint32 impact_kit;
	uint32 state_kit;
	uint32 state_done_kit;
	uint32 channel_kit;
	bool32 has_missile;
	int32 missile_model;
	int32 missile_path_type;
	int32 missile_destination_attachment;
	uint32 missile_sound;
	uint32 anim_event_sound;
	int32 flags;
	uint32 caster_impact_kit;
	uint32 target_impact_kit;
};

struct SpellVisualEffectName {
	uint32 id;
	string_ref name;
	string_ref filename;
	float area_effect_size;
	float scale;
};

struct SpellVisualKit {
	uint32 id;
	uint32 start_anim;
	int32 anim_kit;
	uint32 head_effect;
	uint32 chest_effect;
	uint32 base_effect;
	uint32 left_hand_effect;
	uint32 right_hand_effect;
	uint32 breath_effect;
	uint32 left_weapon_effect;
	uint32 right_weapon_effect;
	uint32 special_effects[3];
	uint32 world_effect;
	uint32 sound;
	uint32 shake;
	float char_proc[4];
	float char_param_zero[4];
	float char_param_one[4];
	float char_param_two[4];
	int32 flags;
};

struct Talent {
	uint32 id;
	uint32 tab;
	int32 tier;
	int32 column_index;
	uint32 spell_rank[9];
	uint32 prereq_talents[3];
	int32 prereq_ranks[3];
	int32 flags;
	uint32 required_spell;
};

struct TalentTab {
	uint32 id;
	string_ref_loc name;
	uint32 spell_icon;
	uint32 race_mask;
	uint32 class_mask;
	uint32 order_index;
	string_ref background_file;
};

struct UnitBlood {
	uint32 id;
	int32 combat_blood_spurt_front_small;
	int32 combat_blood_spurt_front_large;
	int32 combat_blood_spurt_back_small;
	int32 combat_blood_spurt_back_large;
	string_ref texture[5];
};

struct ZoneIntroMusicTable {
	uint32 id;
	string_ref name;
	uint32 intro_sound;
	bool32 priority_over_ambience;
	int32 min_delay;
};

struct ZoneMusic {
	uint32 id;
	string_ref set_name;
	int32 silence_interval_min_day;
	int32 silence_interval_min_night;
	int32 silence_interval_max_day;
	int32 silence_interval_max_night;
	uint32 day_sound;
	uint32 night_sound;
};



#pragma pack(pop)

}}} // disk, dbc, ember